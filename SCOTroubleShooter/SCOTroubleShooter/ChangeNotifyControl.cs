using System;
using System.Windows.Forms;

namespace SCOTroubleShooter.CashManagement
{
	//----------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Provides change notify event to inherited controls so that they can validate, save, and/or update their data 
	/// appropriately.
	/// </summary>
	/// <seealso cref="System.Windows.Forms.UserControl" />
	//----------------------------------------------------------------------------------------------------------------------------
	public class ChangeNotifyControl : UserControl
	{
		//..................................................................................................................................

		#region Private Fields


		private string _uid;

	

		#endregion

		//..................................................................................................................................

		#region Public Event

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Occurs when data is changed.
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		public event EventHandler DataChanged;

		#endregion

		//..................................................................................................................................

		#region Public Properties

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Gets a value indicating whether any part of this window is currently visible.
		/// </summary>
		/// <value><c>true</c> if any part of this window is visible; otherwise, <c>false</c>.</value>
		//------------------------------------------------------------------------------------------------------------------------
		protected bool IsWindowVisible => NativeMethods.User32.IsWindowVisible(Handle);

		

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Gets or sets the uid. (Gets the uid referenced in the controller if the current uid is null).
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		public virtual string UID
		{
			protected get { return _uid ?? (_uid = Controller.UID); }
			set { _uid = value; }
		}



		#endregion

		//..................................................................................................................................

		#region Protected Event Handler

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Notifies the subscriber that changes were made.
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		protected void NotifyChanges(object sender, EventArgs e)
		{
			
				DataChanged?.Invoke(this, null);
		}

		#endregion

		//..................................................................................................................................

		#region Public Virtual Methods

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Event raised when the window is activated.
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		public virtual void WindowActivated()
		{
			// Leave as stub.
		}

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Event raised when the window is deactivated.
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		public virtual void WindowDeactivated()
		{
			// Leave as stub.
		}

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Event raised when the window is about to close.
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		public virtual void OnClosing()
		{
			// Leave as stub.
		}
		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Validates the data.
		/// </summary>
		/// <returns></returns>
		//------------------------------------------------------------------------------------------------------------------------
		public virtual bool ValidateData()
		{
			return true;
			// Leave as stub.
		}

		//------------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Updates the data.
		/// </summary>
		//------------------------------------------------------------------------------------------------------------------------
		public virtual void UpdateData()
		{
			// Leave as stub.
		}

        //------------------------------------------------------------------------------------------------------------------------
        /// <summary>
        /// Saves the data.
        /// </summary>
        //------------------------------------------------------------------------------------------------------------------------
        public virtual void SaveData()
        {
            // Leave as stub.
        }
	
	

	}
}